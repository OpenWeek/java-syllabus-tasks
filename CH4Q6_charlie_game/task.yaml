accessible: true
author: Alexandre Fiset
context: |
    Il vous est demandé de créer un algorithme de recherche de porte.

    Déroulement :
        À l'aide des données fournies sur l'entrée standard, nous vous demandons de trouver le numéro de porte où se trouve Charlie.

        Vous pouvez tester si la porte ``n`` est la bonne en utilisant la fonction ``isDoor(n)`` où ``n`` est le numéro de la porte candidate. Cette fonction retourne un caractère (``char``) valant ``'r'`` si la porte se trouve à droite de la porte candidate et ``'l'`` si la porte se trouve à gauche de la porte candidate.

    Règle :
        La variable ``nDoors`` contient le nombre de porte.

        Vous avez un nombre limité de réponse avant que Charlie ne s'enfuit.

        Le caractère ``'!'`` sera renvoyé une fois Charlie trouvé et votre code devra mettre le numéro de la porte où vous pensez trouver Charlie dans la variable ``candidateDoor``.

        Les portes sont numérotées de gauche à droite, de ``0`` à ``n-1`` inclus


    Pour vous aider vous pouvez vous documenter sur la recherche par bisection.(https://www.youtube.com/watch?v=HfFbNcIp25s)

    .. code-block:: Java

        // int nDoors = 40; // le nombre de portes.
        // int candidateDoor = -42; // la porte derrière laquelle vous pensez que Charlie se trouve
        /* Votre code */
environment: java7
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: Petit jeu
network_grading: false
problems:
    q1:
        language: java
        type: code
        name: Petit jeu
        header: Complétez le code demandé.
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
